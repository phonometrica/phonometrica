########################################################################################################################
# Copyright (C) 2019-2021 Julien Eychenne <jeychenne@gmail.com>                                                        #
#                                                                                                                      #
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public    #
# License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any       #
# later version.                                                                                                       #
#                                                                                                                      #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied   #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more        #
# details.                                                                                                             #
#                                                                                                                      #
# You should have received a copy of the GNU General Public License along with this program. If not, see               #
# <http://www.gnu.org/licenses/>.                                                                                      #
#                                                                                                                      #
# Created: 23/02/2019                                                                                                  #
#                                                                                                                      #
# purpose: a simple event/callback (a.k.a signal/slot) mechanism. Events are unique identifiers generated with         #
# new_event(). An event can be connected/disconnected to/from a number of callbacks. Callbacks can be pure             #
# Phonometrica functions or C++ functions exposed to the scripting engine. Phonometrica's callbacks are allowed to     #
# return a value. Values returned by all the callbacks connected to an event are collected into a list, which is       #
# returned by emit().                                                                                                  #
#                                                                                                                      #
########################################################################################################################

# Table mapping an event ID to a list of callbacks
local bindings = {}
local slot_id = 0

# Create a new event id (this function will be added by the C++ code)
function new_event() 
    local id = slot_id
    slot_id += 1
    return "__evt_" & id
end

# connect an event to a slot
function connect(id as String, slot as Function)
    local callbacks = ref get(bindings, id)

    if callbacks then
        # Check whether the event is already there
        foreach s in callbacks do
            if slot == s then
                return
            end
        end

        append(callbacks, slot)
    else
        bindings[id] = [ slot ]
    end
end

# disconnect an event from a slot
function disconnect(id as String, slot as Function)
    local callbacks = ref get(bindings, id)

    if callbacks then
        for i = callbacks.length downto 1 do
            if callbacks[i] == slot then
                remove_at(callbacks, i)
                return
            end
        end
    end
end

# emit an event, with a number of arguments which will be passed to each slot the event is connected to.
function emit(id as String, args as Object)
    local callbacks = ref get(bindings, id)

    if callbacks then
		local result = []

        foreach callback in callbacks do
			append(result, callback(args))
        end

		return result
    end
end

function emit(id as String)
    emit(id, null)
end

# Define standard events
EVT_ANNOTATION_LOADED = "__evt_annotation_loaded"
EVT_SOUND_LOADED = "__evt_sound_loaded"
EVT_SCRIPT_LOADED = "__evt_document_loaded"
EVT_DOCUMENT_LOADED = "__evt_script_loaded"
EVT_DATASET_LOADED = "__evt_dataset_loaded"
EVT_PROJECT_LOADED = "__evt_project_loaded"
