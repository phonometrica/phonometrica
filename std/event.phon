#######################################################################################################################
#                                                                                                                     #
# Copyright (C) 2019 Julien Eychenne <jeychenne@gmail.com>                                                            #
#                                                                                                                     #
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public   #
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any      #
# later version.                                                                                                      #
#                                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied  #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more       #
# details.                                                                                                            #
#                                                                                                                     #
# You should have received a copy of the GNU General Public License along with this program. If not, see              #
# <http://www.gnu.org/licenses/>.                                                                                     #
#                                                                                                                     #
# Created: 23/02/2019                                                                                                 #
#                                                                                                                     #
# purpose: a simple event/callback (a.k.a signal/slot) mechanism. Events are unique identifiers generated with        #
# event.create(). An event can be connected/disconnected to/from a number of callbacks. Callbacks can be pure         #
# Phonometrica functions or C++ functions exposed to the scripting engine. Phonometrica's callbacks are allowed to    #
# return a value. Values returned by all the callbacks connected to an event are collected into a list, which is      #
# returned by emit().                                                                                                 #
#                                                                                                                     #
#######################################################################################################################

# Table mapping an event ID (obtained from ) to a list of callbacks
var bindings = {}
var slot_id = 0

# Event handling module
event = {}

# Create a new event id (this function will be added by the C++ code)
event.create = function() 
    return "__evt_" + String(slot_id++)
end

# connect an event to a slot
event.connect = function(id, slot)
    var callbacks = bindings.get(id, null)

    if callbacks then
        # Check whether the event is already there
        foreach var s in callbacks do
            if slot == s then
                return
            end
        end

        callbacks.append(slot)
    else
        bindings[id] = [ slot ]
    end
end

# disconnect an event from a slot
event.disconnect = function(id, slot)
    var callbacks = bindings.get(id, null)

    if callbacks then
        for var i = callbacks.length downto 1 do
            if callbacks[i] == slot then
                callbacks.remove_at(i)
                return
            end
        end
    end
end

# emit an event, with a number of arguments which will be passed to each slot the event is connected to.
event.emit = function(id, arg)
    var callbacks = bindings.get(id, null)

    if callbacks then
		var result = []

        foreach var callback in callbacks do
            var r = callback(arg)
			result.append(r)
        end

		return result
    end
end

# Define standard events
event.annotation_loaded = "__evt_annotation_loaded"
event.sound_loaded = "__evt_sound_loaded"
event.script_loaded = "__evt_script_loaded"
event.document_loaded = "__evt_document_loaded"
event.dataset_loaded = "__evt_dataset_loaded"
event.project_loaded = "__evt_project_loaded"


!*
function test(arg)
    print("Ã§a marche !", arg)
end
var EVT = event.create()
event.connect(EVT, test)
event.emit(EVT, "XXX")
event.disconnect(EVT, test)
event.emit(EVT, "!!!") # does nothing
*!
