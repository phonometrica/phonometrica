########################################################################################################################
# Copyright (C) 2019 Julien Eychenne <jeychenne@gmail.com>, léa Courdès-Murphy <lea.courdes.murphy@gmail.com>          #
#                                                                                                                      #
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public    #
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any       #
# later version.                                                                                                       #
#                                                                                                                      #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied   #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more        #
# details.                                                                                                             #
#                                                                                                                      #
# You should have received a copy of the GNU General Public License along with this program. If not, see               #
# <http://www.gnu.org/licenses/>.                                                                                      #
#                                                                                                                      #
# Created: 18/10/2019                                                                                                  #
#                                                                                                                      #
# Purpose: Save annotations in a text file.        				                                                       #
#                                                                                                                      #
########################################################################################################################

# Setup user interface as a JSON object. Keys don't need to be surrounded by double-quotes if the JSON is constructed
# directly in a script.
var default_output = system.join_path(system.user_directory, "output.txt")
var ui = {
    title: "TransPhon",
    width: 300,
    items: [
        { type: "label", text: "Choose output file:" },
        { type: "file_selector", name: "path", title: "Select text file...", default: default_output },
        { type: "label", text: "Select layers separated by a comma, or leave empty to process all layers:" },
        { type: "field", name: "layers", default: "1"},
        { type: "label", text: "Choose annotations:"},
		# Annotations will be inserted here
        { type: "label", text: "Choose event separator:"},
        { type: "radio_buttons", name: "separator", values: ["space", "new line", "none"] }    
    ]
}

# Insert check list for annotations
var labels = []
var values = []

var annotation_files = get_annotations()

foreach var annot in annotation_files do
	var path = annot.path
	# This is the real value we are interested in
	values.append(path)
	# This is the label that will be displayed
	labels.append(system.get_base_name(path))
end

# Create item and insert it at position 6 in the list of items
var item = { "type": "check_list", "name": "annotations", "labels": labels, "values": values }
ui.items.insert(6, item)

# `result` will contain a JSON object if the user pressed "OK", or null otherwise.
var result = create_dialog(ui)

# Process the result.
if result then
#################################################
################################################# write in the file
#################################################

	# Open the file in write mode
	var path = result.path
	var output_file = File(path, "w")
	
	##### Annotation file loop
	
	# Create a list depending on the annotation files chosen
	if result.annotations == [] then
		for var i=1 to annotation_files.length do 
			result.annotations.append(annotation_files[i].path)
		end
	end

	# Loop starts
	foreach var id in result.annotations do

		for var j=1 to annotation_files.length do
			if	annotation_files[j].path == id then
	
				var annotation_file_name = system.get_base_name(annotation_files[j].path)
				var annotation_file_name_length = annotation_file_name.length
				
				# Write the title of each annotation file in the output file
				var esthetic = ""
		
				for k=1 to annotation_file_name_length do
					esthetic = esthetic & "%"
				end
				
				output_file.write_line(esthetic)
				output_file.write_line(annotation_file_name)
				output_file.write_line(esthetic)
				output_file.write_line("")
			
			
				##### Tier loop
				var tiers_list = [ ]
				var n = 0
		
				# Create a list depending on the layer chosen		
				if result.layers == "" then
					var nlayer = annotation_files[j].layer_count
					for var l=1 to nlayer do
						tiers_list.append(l)
					end
				else													
					var regex_layer = new Regex("[1-9]")
					var nlayer_temp = result.layers
					repeat
						regex_layer.match(nlayer_temp)
						tiers_list.append(Number(regex_layer.group()))
						nlayer_temp = nlayer_temp.remove(regex_layer.group())
					until regex_layer.match(nlayer_temp) == false		
				end
				
				# loop starts
				foreach var tier in tiers_list do
					
					# Write the title of each layer in the output file
					var layer_title = (annotation_files[j].get_layer_label(tier))
					output_file.write_line("%%%% Layer: " & layer_title)
					output_file.write_line("")
				
					##### Intervals loop
		
					var regex_any_text = new Regex("[a-z]")
					var n_interval = annotation_files[j].get_event_count(tier)
			
					for m=1 to n_interval do 
						var text_in_interval = annotation_files[j].get_event_text(tier, m)
						
						# Find interval which contain some text
						if regex_any_text.match(text_in_interval) then
							
							# Write the text from each interval in the output file. Type of writing depending on which separator is chosen.
							if result.separator == 1 then
								output_file.write(text_in_interval & " ")
							elsif result.separator == 2 then
								output_file.write_line(text_in_interval)				
							elsif result.separator == 3 then
								output_file.write(text_in_interval)
							end
						end
					
					end
				
					output_file.write_line("")
					output_file.write_line("")
				end

			end	

		end	
		output_file.write_line("")
		output_file.write_line("")
		output_file.write_line("")
	
	end
	output_file.close()

	var show = ask("Annotations have been written to '" & path & "'.\nWould you like to view the file?")
	
	if show then
		view_text(path, system.get_base_name(path), 500)
	end
end