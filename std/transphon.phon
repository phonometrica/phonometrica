########################################################################################################################
# Copyright (C) 2019-2021 Léa Courdès-Murphy <lea.courdes.murphy@gmail.com>, Julien Eychenne <jeychenne@gmail.com>     #
#                                                                                                                      #
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public    #
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any       #
# later version.                                                                                                       #
#                                                                                                                      #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied   #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more        #
# details.                                                                                                             #
#                                                                                                                      #
# You should have received a copy of the GNU General Public License along with this program. If not, see               #
# <http://www.gnu.org/licenses/>.                                                                                      #
#                                                                                                                      #
# Created: 18/10/2019                                                                                                  #
#                                                                                                                      #
# Purpose: Save annotations in a text file.        				                                                       #
#                                                                                                                      #
########################################################################################################################

# Setup user interface as a JSON object. Keys don't need to be surrounded by double-quotes if the JSON is constructed
# directly in a script.
local default_output = join_path(get_user_directory(), "output.txt")
local ui = {
    "title": "TransPhon",
    "width": 300,
    "items": [
        { "type": "label", "text": "Choose output file:" },
        { "type": "file_selector", "name": "path", "title": "Select text file...", "default": default_output },
        { "type": "label", "text": "Select layers separated by a comma, or leave empty to process all layers:" },
        { "type": "field", "name": "layers", "default": "1"},
        { "type": "label", "text": "Choose annotations:"},
		# Annotations will be inserted here
        { "type": "label", "text": "Choose event separator:"},
        { "type": "radio_buttons", "name": "separator", "values": ["space", "new line", "none"] }    
    ]
}

# Insert check list for annotations
local labels = []
local values = []

local annotation_files = get_annotations()

foreach annot in annotation_files do
	local path = annot.path
	# This is the real value we are interested in
	append(values, path)
	# This is the label that will be displayed
	append(labels, get_base_name(path))
end

# Create item and insert it at position 6 in the list of items
local item = { "type": "check_list", "name": "annotations", "labels": labels, "values": values }
insert(ui.items, 6, item)

# `result` will contain a JSON object if the user pressed "OK", or null otherwise.
local result = create_dialog(ui)

# Process the result.
if result then
#################################################
################################################# write in the file
#################################################

	# Open the file in write mode
	local path = result["path"]
	local output_file = File(path, "w")
	
	##### Annotation file loop
	
	# Create a list depending on the annotation files chosen
	local annotations = ref result["annotations"]
	if is_empty(annotations) then
		for i = 1 to annotation_files.length do 
			append(annotations, annotation_files[i].path)
		end
	end

	# Loop starts
	foreach id in annotations do

		for j = 1 to annotation_files.length do
			if	annotation_files[j].path == id then
	
				local annotation_file_name = get_base_name(annotation_files[j].path)
				local annotation_file_name_length = annotation_file_name.length
				
				# Write the title of each annotation file in the output file
				local esthetic = ""
		
				for k = 1 to annotation_file_name_length do
					esthetic = esthetic & "%"
				end
				
				write_line(output_file, esthetic)
				write_line(output_file, annotation_file_name)
				write_line(output_file, esthetic)
				write_line(output_file, "")
			
				##### Tier loop
				local tiers_list = [ ]
				local n = 0
		
				# Create a list depending on the layer chosen		
				if result["layers"] == "" then
					local nlayer = annotation_files[j].nlayer
					for l = 1 to nlayer do
						append(tiers_list, l)
					end
				else	
					# FIXME: rewrite this block with split?												
					local regex_layer = Regex("[1-9]")
					local nlayer_temp = result["layers"]
					repeat
						match(regex_layer, nlayer_temp)
						append(tiers_list, int(group(regex_layer)))
						nlayer_temp = nlayer_temp.remove(regex_layer.group())
					until match(regex_layer, nlayer_temp) == false		
				end
				
				# loop starts
				foreach tier in tiers_list do
					
					# Write the title of each layer in the output file
					local layer_title = get_layer_label(annotation_files[j], tier)
					write_line(output_file, "%%%% Layer: " & layer_title)
					write_line(output_file, "")
				
					##### Intervals loop
		
					# FIXME: rewrite without regex?
					local regex_any_text = Regex("[a-z]")
					local n_interval = get_event_count(annotation_files[j], tier)
			
					for m = 1 to n_interval do 
						local text_in_interval = get_event_text(annotation_files[j], tier, m)
						
						# Find interval which contains some text
						if match(regex_any_text, text_in_interval) then
							
							# Write the text from each interval in the output file. Type of writing depending on which separator is chosen.
							local sep = result["separator"]
							if sep == 1 then
								write(output_file, text_in_interval & " ")
							elsif sep == 2 then
								write_line(toutput_file, ext_in_interval)				
							elsif sep == 3 then
								write(output_file, text_in_interval)
							end
						end
					
					end
				
					write_line(output_file, "")
					write_line(output_file, "")
				end

			end	

		end	
		write_line(output_file, "")
		write_line(output_file, "")
		write_line(output_file, "")
	
	end
	close(output_file)

	local show = ask("Annotations have been written to '" & path & "'.\nWould you like to view the file?")
	
	if show then
		view_text(path, get_base_name(path), 500)
	end
end