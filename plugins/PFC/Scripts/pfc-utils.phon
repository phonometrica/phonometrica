########################################################################################################################
# Copyright (C) 2019 Julien Eychenne <jeychenne@gmail.com>                                                             #
#                                                                                                                      #
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public    #
# License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any       #
# later version.                                                                                                       #
#                                                                                                                      #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied   #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more        #
# details.                                                                                                             #
#                                                                                                                      #
# You should have received a copy of the GNU General Public License along with this program. If not, see               #
# <http://www.gnu.org/licenses/>.                                                                                      #
#                                                                                                                      #
#                                                                                                                      #
# Created: 13/03/2019 (modified 09/02/2021)                                                                            #
#                                                                                                                      #
# Purpose: Add PFC metadata to annotations in a project.                                                               #
#                                                                                                                      #
########################################################################################################################

local module = Module("PFC")
module.version = "1.0"
module.author = "Julien Eychenne & Léa Courdès-Murphy"

# PFC files annotations follow the following naming convention: xxxyyyzg.TextGrid, where xxx is the survey code, yyy is
# the speaker code, and z is the task code. The corresponding sound file is named xxxyyyzw.wav. 
# This script extracts these metadata from an annotation's file name, and tries to bind it to the corresponding sound
# file if it exists. For convenience, we allow other common sound extensions such as FLAC and MP3.

# Add your own extensions here if you use something more exotic
local sound_extensions = [".wav", ".flac", ".mp3"]

# Pattern to find metadata in a TextGrid file
local re = Regex("^(...)(...)(.gx?)\\.[tT]ext[gG]rid$")

# PFC tasks
local tasks = {
	"gg": "Guided conversation",
	"lg": "Free conversation",
	"tg": "Text",
	"mg": "Word list",
	"mgx": "Supplementary word list"
}

# Add metadata to a single annotation
local function add_metadata(annot)
	# Set properties
	local file = get_base_name(annot.path)
	if match(re, file) then
		local survey = to_upper(group(re, 1))
		local speaker = survey & to_upper(group(re, 2))
		local task = tasks[group(re, 3)]
		add_property(annot, "Survey", survey)
		add_property(annot, "Task", task)
		add_property(annot, "Speaker", speaker)	
	end

	# Try to bind the annotation to a sound file
	local base = strip_extension(annot.path)
	base = left(base, base.length - 1) & "w"
	foreach ext in sound_extensions do
		local sound = base & ext
		if exists(sound) then
			bind_to_sound(annot, sound)
			break
		end
	end
end


# Process all the annotations in the current project
module.tag_annotations = function()
	local annotations = get_annotations()
	create_progress_dialog("Writing PFC metadata...", "PFC plugin", len(annotations))
	local count = 1
	foreach annot in annotations do
		update_progress_dialog(count)
		count += 1
		add_metadata(annot)
	end
	phon.project.refresh()
	info("Metadata were successfully addded!")
end

module.add_metadata = add_metadata

# Export the module
return module